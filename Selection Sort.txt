using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Selection_Sort
{
    /*
     *                                                              Introduction to Selection Sort

                        Selection Sort is a straightforward sorting algorithm that segments the list into two parts: sorted and unsorted. It repeatedly selects the smallest (or largest
                        depending on sorting order) element from the unsorted segment and moves it to the end of the sorted segment.

                       Ø¥ Thealgorithm has a time complexity of O(n2)

                        O(n2), making it inefficient for large datasets.
                        
                        Here's the step-by-step process:
                        
                        Start with the entire list as the unsorted section.
                        Find the smallest element in the unsorted section of the list.
                        Swap this smallest element with the first element of the unsorted section.
                        Shrink the unsorted section of the list by one from the left, and if any elements are left unsorted, repeat from step 2.
                        The name "selection sort" comes from this process of selecting the next smallest (or largest) element from the unsorted portion of the list and then swapping it into place.
                        This selection process is repeated until the entire list is sorted.
    */
    internal class Program
    {
        static void SelectionSortAsc(int[] arr)
        {
            int n = arr.Length;

            // One by one move boundary of unsorted subarray
            for (int i = 0; i < n - 1; i++)
            {
                // Find the minimum element in unsorted array
                int minIndex = i;
                for (int j = i + 1; j < n; j++)
                    if (arr[j] < arr[minIndex])
                        minIndex = j;

                // Swap the found minimum element with the first element
                int temp = arr[minIndex];
                arr[minIndex] = arr[i];
                arr[i] = temp;
            }
        }

        static void SelectionSortDesc(int[] arr)
        {
            int n = arr.Length;

            // One by one move boundary of unsorted subarray
            for (int i = 0; i < n - 1; i++)
            {
                // Find the Maximum element in unsorted array
                int maxIndex = i;
                for (int j = i + 1; j < n; j++)
                    if (arr[j] > arr[maxIndex])
                        maxIndex = j;

                // Swap the found minimum element with the first element
                int temp = arr[maxIndex];
                arr[maxIndex] = arr[i];
                arr[i] = temp;
            }
        }

        static void Main(string[] args)
        {
            int[] arr = { 64, 34, 25, 12, 22, 11, 90 };


            Console.WriteLine("Original array:");
            foreach (int value in arr)
            {
                Console.Write(value + " ");
            }
            Console.WriteLine();

            SelectionSortAsc(arr);

            Console.WriteLine("\nSorted array ASC:");
            foreach (int value in arr)
            {
                Console.Write(value + " ");
            }

            SelectionSortDesc(arr);

            Console.WriteLine("\n\nSorted array Desc:");
            foreach (int value in arr)
            {
                Console.Write(value + " ");
            }
            Console.ReadKey();
        }
    }
}
